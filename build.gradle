buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

group = 'org.teacon'
version = '1.1.0'

archivesBaseName = 'xibao'
java.toolchain.languageVersion = JavaLanguageVersion.of(11) // Mojang ships Java 8 to end users, so your mod should target Java 8.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'info'

            mods {
                xibao {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'info'

            mods {
                xibao {
                    source sourceSets.main
                }
            }
        }

        // Yes this mod does not have any data to generate.
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Xibao",
            "Specification-Vendor": "IzzelAliz",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"TeaConMC",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar') 

publishing {
    publications {
        release(MavenPublication) {
            groupId = "org.teacon"
            artifactId = "Xibao-Forge-1.16"

            artifact jar
            pom {
                name = 'Xibao for Minecraft 1.18'
                description = 'Ask IzzelAliz what is this'
                licenses {
                    license {
                        name = 'BSD-3-Clause'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "teacon"
            url = "s3://maven/"
            credentials(AwsCredentials) {
                accessKey = System.env.ARCHIVE_ACCESS_KEY
                secretKey = System.env.ARCHIVE_SECRET_KEY
            }
        }
    }
}
tasks.withType(PublishToMavenRepository) {
    onlyIf {
        System.env.ARCHIVE_ACCESS_KEY && System.env.ARCHIVE_SECRET_KEY
    }
}

/**
 * A simple task to pass down the artifact name and path to other GitHub actions.
 */
task("githubActionOutput") {
    onlyIf {
        System.env.GITHUB_ACTIONS
    }
    doLast {
        println "::set-output name=artifact_path::${jar.archiveFile.get().asFile.absolutePath}"
        println "::set-output name=artifact_name::${jar.archiveFileName.get()}"
    }
}